datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Ad {
  id              String          @id @default(cuid())
  title           String
  description     String?
  duration        Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  mediaFiles      MediaFile[]
  trackingEvents  TrackingEvent[]
  metrics         AdMetrics?
  interactiveData Json?
  interactions    Interaction[]
  overlays        Overlay[]

  @@index([createdAt])
  @@map("ads")
}

model MediaFile {
  id        String   @id @default(cuid())
  adId      String
  filename  String
  width     Int
  height    Int
  bitrate   Int
  codec     String
  platform  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  ad        Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@index([adId])
  @@index([platform])
  @@map("media_files")
}

model TrackingEvent {
  id        String   @id @default(cuid())
  type      String
  adId      String
  timestamp DateTime
  userAgent String?
  ipAddress String?
  metadata  Json?
  createdAt DateTime @default(now())
  
  ad        Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@index([adId])
  @@index([type])
  @@index([timestamp])
  @@map("tracking_events")
}

model AdMetrics {
  id              String   @id @default(cuid())
  adId            String   @unique
  impressions     Int      @default(0)
  starts          Int      @default(0)
  firstQuartiles  Int      @default(0)
  midpoints       Int      @default(0)
  thirdQuartiles  Int      @default(0)
  completes       Int      @default(0)
  clicks          Int      @default(0)
  mutes           Int      @default(0)
  unmutes         Int      @default(0)
  pauses          Int      @default(0)
  resumes         Int      @default(0)
  fullscreen      Int      @default(0)
  exitFullscreen  Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  ad              Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@map("ad_metrics")
}

model Interaction {
  id          String   @id @default(cuid())
  adId        String
  type        String   // button, carousel, gallery, trivia, qr, choice
  config      Json     // Configuración específica del tipo de interacción
  position    Json     // { x: number, y: number }
  size        Json     // { width: number, height: number }
  startTime   Float    // Tiempo en segundos cuando aparece
  endTime     Float?   // Tiempo en segundos cuando desaparece (opcional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ad          Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@index([adId])
  @@index([type])
  @@map("interactions")
}

model Overlay {
  id          String   @id @default(cuid())
  adId        String
  type        String   // html, image, video
  content     String   // URL del contenido o HTML
  position    Json     // { x: number, y: number }
  size        Json     // { width: number, height: number }
  startTime   Float    // Tiempo en segundos cuando aparece
  endTime     Float?   // Tiempo en segundos cuando desaparece (opcional)
  zIndex      Int      @default(0)
  styles      Json?    // Estilos CSS adicionales
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ad          Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@index([adId])
  @@index([type])
  @@map("overlays")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
} 