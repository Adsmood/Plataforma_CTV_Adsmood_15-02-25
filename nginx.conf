worker_processes auto;
error_log /usr/local/openresty/nginx/logs/error.log warn;
pid /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Configuración de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /usr/local/openresty/nginx/logs/access.log main buffer=16k;

    # Optimizaciones básicas
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    reset_timedout_connection on;
    client_body_timeout 10;
    send_timeout 2;

    # Configuración de buffers
    client_body_buffer_size 128k;
    client_max_body_size 100M;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Configuración de cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Compresión gzip
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        application/javascript
        application/json
        application/xml
        application/xml+rss
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Configuración de directorios temporales
    proxy_temp_path /usr/local/openresty/nginx/proxy_temp;
    client_body_temp_path /usr/local/openresty/nginx/client_body_temp;
    fastcgi_temp_path /usr/local/openresty/nginx/fastcgi_temp;
    uwsgi_temp_path /usr/local/openresty/nginx/uwsgi_temp;
    scgi_temp_path /usr/local/openresty/nginx/scgi_temp;

    # Configuración de CORS
    map $http_origin $cors_header {
        default "";
        "~^https?://.*\.onrender\.com$" "$http_origin";
        "~^https?://.*\.render\.com$" "$http_origin";
        "~^https?://.*\.adsmood\.com$" "$http_origin";
        "~^https?://.*\.doubleclick\.net$" "$http_origin";
    }

    server {
        listen 80;
        server_name _;
        root /data;

        # Headers de seguridad
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Cache para archivos estáticos
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|mp4|webm|ogg)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            # Configuración específica para streaming de video
            mp4_buffer_size       1m;
            mp4_max_buffer_size   5m;
            
            # Soporte mejorado para range requests
            add_header Accept-Ranges bytes;
            
            # Configuración unificada de buffer para streaming
            proxy_buffering off;
            
            # Manejar range requests correctamente
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }
            
            try_files $uri =404;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
                add_header 'Access-Control-Allow-Headers' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Endpoint para subida de archivos
        location /upload {
            limit_except POST OPTIONS {
                deny all;
            }

            client_max_body_size 100M;
            client_body_buffer_size 100M;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                
                content_by_lua_block {
                    local upload = require "resty.upload"
                    local cjson = require "cjson"
                    
                    local chunk_size = 4096
                    local form = upload:new(chunk_size)
                    
                    local file
                    local filename
                    
                    -- Función para sanitizar nombre de archivo
                    local function sanitize_filename(name)
                        if not name then return nil end
                        
                        -- Eliminar caracteres no seguros y path traversal
                        name = name:gsub("[^%w%.%-_]", "_")
                        name = name:gsub("%.%.", "_")
                        
                        -- Asegurar extensión válida
                        local ext = name:match("%.([^%.]+)$")
                        if not ext then return nil end
                        
                        local valid_extensions = {
                            jpg = true, jpeg = true, png = true, gif = true,
                            mp4 = true, webm = true, ogg = true
                        }
                        
                        if not valid_extensions[ext:lower()] then
                            return nil
                        end
                        
                        -- Generar nombre único
                        local timestamp = ngx.time()
                        local random = math.random(1000, 9999)
                        return string.format("%d_%d_%s", timestamp, random, name)
                    end
                    
                    -- Inicializar random seed
                    math.randomseed(ngx.time())
                    
                    -- Agregar logging
                    ngx.log(ngx.INFO, "Iniciando subida de archivo")
                    
                    while true do
                        local typ, res, err = form:read()
                        if not typ then
                            ngx.log(ngx.ERR, "Error leyendo form: ", err)
                            ngx.status = 400
                            ngx.say(cjson.encode({
                                error = "Error leyendo form: " .. (err or "unknown")
                            }))
                            return
                        end
                        
                        if typ == "header" then
                            local header = res[1]
                            local value = res[2]
                            ngx.log(ngx.INFO, "Header recibido: ", header, " = ", value)
                            
                            if header == "Content-Disposition" then
                                -- Buscar tanto name como filename
                                local name = string.match(value, 'name="([^"]+)"')
                                local original_filename = string.match(value, 'filename="([^"]+)"')
                                
                                ngx.log(ngx.INFO, "Field name: ", name, ", original filename: ", original_filename)
                                
                                if original_filename and name == "file" then
                                    filename = sanitize_filename(original_filename)
                                    if not filename then
                                        ngx.log(ngx.ERR, "Nombre de archivo inválido o extensión no permitida")
                                        ngx.status = 400
                                        ngx.say(cjson.encode({
                                            error = "Tipo de archivo no permitido"
                                        }))
                                        return
                                    end
                                    
                                    local filepath = "/data/" .. filename
                                    ngx.log(ngx.INFO, "Abriendo archivo: ", filepath)
                                    file = io.open(filepath, "w+")
                                    if not file then
                                        ngx.log(ngx.ERR, "Error abriendo archivo: ", filepath)
                                        ngx.status = 500
                                        ngx.say(cjson.encode({
                                            error = "Error creando archivo"
                                        }))
                                        return
                                    end
                                end
                            end
                        elseif typ == "body" then
                            if file then
                                file:write(res)
                            end
                        elseif typ == "part_end" then
                            if file then
                                file:close()
                                file = nil
                            end
                        elseif typ == "eof" then
                            break
                        end
                    end
                    
                    if filename then
                        ngx.log(ngx.INFO, "Subida exitosa: ", filename)
                        ngx.header.content_type = "application/json"
                        ngx.say(cjson.encode({
                            url = "/" .. filename,
                            success = true
                        }))
                    else
                        ngx.log(ngx.ERR, "No se recibió ningún archivo")
                        ngx.status = 400
                        ngx.say(cjson.encode({
                            error = "No se recibió ningún archivo"
                        }))
                    end
                }
            }
        }

        # Endpoint para exportación de videos
        location /export {
            limit_except POST OPTIONS {
                deny all;
            }

            client_max_body_size 100M;
            client_body_buffer_size 100M;
            client_body_timeout 300s;
            
            # Configurar directorio temporal
            client_body_temp_path /data/tmp;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                
                content_by_lua_block {
                    local upload = require "resty.upload"
                    local cjson = require "cjson"
                    local os = require "os"
                    
                    -- Función para sanitizar nombre de archivo
                    local function sanitize_filename(name, platform, config)
                        if not name then 
                            ngx.log(ngx.ERR, "Nombre de archivo no proporcionado")
                            return nil 
                        end
                        
                        -- Eliminar caracteres no seguros
                        name = name:gsub("[^%w%.%-_]", "_")
                        name = name:gsub("%.%.", "_")
                        
                        -- Generar nombre único con timestamp
                        local timestamp = os.time()
                        local random = math.random(1000, 9999)
                        
                        -- Formato: nombre_timestamp_plataforma_resolucion.mp4
                        local filename = string.format(
                            "%s_%d_%d_%s_%s.mp4",
                            name,
                            timestamp,
                            random,
                            platform or "default",
                            (config and config.resolution) or "1080p"
                        )
                        
                        ngx.log(ngx.INFO, "Nombre de archivo generado: " .. filename)
                        return filename
                    end
                    
                    -- Función para validar configuración
                    local function validate_config(config)
                        if not config then 
                            ngx.log(ngx.ERR, "Configuración no proporcionada")
                            return nil 
                        end
                        
                        local valid_resolutions = { ["1080p"] = true, ["4k"] = true }
                        local valid_codecs = { ["h264"] = true, ["h265"] = true }
                        
                        if not valid_resolutions[config.resolution] then
                            ngx.log(ngx.ERR, "Resolución no válida: " .. (config.resolution or "nil"))
                            return nil, "Resolución no válida"
                        end
                        
                        if not valid_codecs[config.videoCodec] then
                            ngx.log(ngx.ERR, "Codec no válido: " .. (config.videoCodec or "nil"))
                            return nil, "Codec no válido"
                        end
                        
                        return config
                    end
                    
                    -- Procesar la subida
                    local chunk_size = 8192
                    local form = upload:new(chunk_size)
                    form:set_timeout(300000) -- 5 minutos
                    
                    local file
                    local filename
                    local platform
                    local config
                    
                    ngx.log(ngx.INFO, "Iniciando procesamiento de exportación")
                    
                    while true do
                        local typ, res, err = form:read()
                        
                        if not typ then
                            ngx.log(ngx.ERR, "Error leyendo form: " .. (err or "unknown"))
                            ngx.status = 400
                            ngx.say(cjson.encode({
                                error = "Error leyendo form: " .. (err or "unknown")
                            }))
                            return
                        end
                        
                        if typ == "header" then
                            local header = res[1]
                            local value = res[2]
                            
                            ngx.log(ngx.INFO, "Header recibido: " .. header .. " = " .. value)
                            
                            if header == "Content-Disposition" then
                                local name = string.match(value, 'name="([^"]+)"')
                                local original_filename = string.match(value, 'filename="([^"]+)"')
                                
                                if name == "platform" then
                                    platform = original_filename
                                    ngx.log(ngx.INFO, "Plataforma: " .. (platform or "nil"))
                                elseif name == "config" then
                                    config = cjson.decode(original_filename)
                                    ngx.log(ngx.INFO, "Configuración: " .. original_filename)
                                    local valid_config, err = validate_config(config)
                                    if not valid_config then
                                        ngx.status = 400
                                        ngx.say(cjson.encode({
                                            error = "Configuración inválida: " .. (err or "unknown")
                                        }))
                                        return
                                    end
                                elseif name == "file" and original_filename then
                                    filename = sanitize_filename(original_filename, platform, config)
                                    if not filename then
                                        ngx.status = 400
                                        ngx.say(cjson.encode({
                                            error = "Nombre de archivo inválido"
                                        }))
                                        return
                                    end
                                    
                                    local filepath = "/data/" .. filename
                                    ngx.log(ngx.INFO, "Creando archivo: " .. filepath)
                                    
                                    file = io.open(filepath, "w+")
                                    if not file then
                                        ngx.log(ngx.ERR, "Error creando archivo: " .. filepath)
                                        ngx.status = 500
                                        ngx.say(cjson.encode({
                                            error = "Error creando archivo"
                                        }))
                                        return
                                    end
                                end
                            end
                        elseif typ == "body" then
                            if file then
                                file:write(res)
                            end
                        elseif typ == "part_end" then
                            if file then
                                file:close()
                                file = nil
                            end
                        elseif typ == "eof" then
                            break
                        end
                    end
                    
                    if filename then
                        ngx.log(ngx.INFO, "Exportación exitosa: " .. filename)
                        ngx.header.content_type = "application/json"
                        ngx.say(cjson.encode({
                            url = "/" .. filename,
                            success = true,
                            config = config
                        }))
                    else
                        ngx.log(ngx.ERR, "No se recibió ningún archivo")
                        ngx.status = 400
                        ngx.say(cjson.encode({
                            error = "No se recibió ningún archivo"
                        }))
                    end
                }
            }
        }
        
        # Endpoint para VAST XML
        location ~ ^/vast/([^/]+)$ {
            default_type application/xml;
            
            # Headers CORS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
                add_header 'Access-Control-Allow-Headers' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            content_by_lua_block {
                local cjson = require "cjson"
                local vast_id = ngx.var[1]
                
                -- Función para reemplazar macros
                local function replace_macros(url)
                    local timestamp = ngx.time()
                    local cache_buster = math.random(1000000, 9999999)
                    
                    return url:gsub("%[TIMESTAMP%]", tostring(timestamp))
                             :gsub("%[CACHEBUSTING%]", tostring(cache_buster))
                             :gsub("%[RANDOM%]", tostring(cache_buster))
                             :gsub("%[CACHEBUSTER%]", tostring(cache_buster))
                end
                
                -- Obtener información del anuncio (aquí deberíamos consultar una base de datos)
                -- Por ahora usaremos datos de ejemplo
                local ad_data = {
                    id = vast_id,
                    title = "CTV Ad " .. vast_id,
                    video_url = "https://adsmood-ctv-assets.onrender.com/" .. vast_id .. ".mp4",
                    width = 1920,
                    height = 1080,
                    duration = 30,
                    tracking_base_url = "https://adsmood-ctv-api.onrender.com"
                }
                
                -- Generar XML VAST
                local vast_xml = string.format([[<?xml version="1.0" encoding="UTF-8"?>
<VAST version="4.2" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <Ad id="%s">
    <InLine>
      <AdSystem version="1.0">Adsmood CTV Platform</AdSystem>
      <AdTitle><![CDATA[%s]]></AdTitle>
      <Impression><![CDATA[%s]]></Impression>
      <Creatives>
        <Creative id="%s_1" sequence="1">
          <Linear>
            <Duration>00:00:%02d</Duration>
            <TrackingEvents>
              <Tracking event="start"><![CDATA[%s]]></Tracking>
              <Tracking event="firstQuartile"><![CDATA[%s]]></Tracking>
              <Tracking event="midpoint"><![CDATA[%s]]></Tracking>
              <Tracking event="thirdQuartile"><![CDATA[%s]]></Tracking>
              <Tracking event="complete"><![CDATA[%s]]></Tracking>
            </TrackingEvents>
            <VideoClicks>
              <ClickThrough><![CDATA[%s]]></ClickThrough>
              <ClickTracking><![CDATA[%s]]></ClickTracking>
            </VideoClicks>
            <MediaFiles>
              <MediaFile delivery="progressive" type="video/mp4" width="%d" height="%d" codec="H.264">
                <![CDATA[%s]]>
              </MediaFile>
            </MediaFiles>
          </Linear>
        </Creative>
      </Creatives>
      <Extensions>
        <Extension type="AdVerification">
          <VerificationParameters>
            <![CDATA[%s]]>
          </VerificationParameters>
        </Extension>
      </Extensions>
    </InLine>
  </Ad>
</VAST>]],
                    ad_data.id,
                    ad_data.title,
                    replace_macros(ad_data.tracking_base_url .. "/track/impression/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    ad_data.id,
                    ad_data.duration,
                    replace_macros(ad_data.tracking_base_url .. "/track/start/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    replace_macros(ad_data.tracking_base_url .. "/track/firstQuartile/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    replace_macros(ad_data.tracking_base_url .. "/track/midpoint/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    replace_macros(ad_data.tracking_base_url .. "/track/thirdQuartile/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    replace_macros(ad_data.tracking_base_url .. "/track/complete/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    replace_macros(ad_data.tracking_base_url .. "/click/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    replace_macros(ad_data.tracking_base_url .. "/track/click/" .. ad_data.id .. "?cb=[CACHEBUSTING]&ts=[TIMESTAMP]"),
                    ad_data.width,
                    ad_data.height,
                    ad_data.video_url,
                    cjson.encode({
                        adId = ad_data.id,
                        timestamp = ngx.time(),
                        trackingBaseUrl = ad_data.tracking_base_url
                    })
                )
                
                -- Configurar headers
                ngx.header.content_type = "application/xml"
                ngx.header.cache_control = "no-cache, no-store, must-revalidate"
                ngx.header.pragma = "no-cache"
                ngx.header.expires = "0"
                
                -- Enviar respuesta
                ngx.say(vast_xml)
            }
        }
        
        # Endpoint para tracking de eventos
        location ~ ^/track/([^/]+)/([^/]+)$ {
            default_type application/json;
            
            # Headers CORS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            
            content_by_lua_block {
                local event_type = ngx.var[1]
                local ad_id = ngx.var[2]
                
                -- Log del evento
                ngx.log(ngx.INFO, string.format(
                    "Tracking event - Type: %s, Ad ID: %s, IP: %s, User-Agent: %s",
                    event_type,
                    ad_id,
                    ngx.var.remote_addr,
                    ngx.var.http_user_agent
                ))
                
                -- Aquí deberíamos almacenar el evento en una base de datos
                -- Por ahora solo respondemos con éxito
                ngx.say(cjson.encode({
                    success = true,
                    event = event_type,
                    adId = ad_id,
                    timestamp = ngx.time()
                }))
            }
        }
        
        # Acceso público a archivos
        location / {
            # Denegar acceso a archivos ocultos
            location ~ /\. {
                deny all;
                return 404;
            }

            try_files $uri $uri/ =404;
            autoindex off;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            
            # Páginas de error personalizadas
            error_page 403 = @403;
            error_page 404 = @404;
        }

        # Manejadores de error
        location @403 {
            default_type application/json;
            return 403 '{"error": "Acceso prohibido", "message": "No se permite listar el directorio"}';
        }

        location @404 {
            default_type application/json;
            return 404 '{"error": "No encontrado", "message": "El archivo solicitado no existe"}';
        }
    }
} 