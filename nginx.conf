user nobody;
worker_processes auto;
error_log /usr/local/openresty/nginx/logs/error.log warn;
pid /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /usr/local/openresty/nginx/logs/access.log main;
    sendfile on;
    keepalive_timeout 65;

    # Configuración para subidas de archivos grandes
    client_max_body_size 100M;
    client_body_buffer_size 100M;
    client_body_timeout 120s;
    client_body_temp_path /data/tmp;

    # Configuración de CORS
    map $http_origin $cors_header {
        default "";
        "~^https?://.*\.onrender\.com$" "$http_origin";
        "~^https?://.*\.render\.com$" "$http_origin";
        "~^https?://.*\.adsmood\.com$" "$http_origin";
    }

    server {
        listen 80;
        server_name _;
        root /data;

        # Configuración de CORS
        add_header 'Access-Control-Allow-Origin' $cors_header always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # Endpoint para subida de archivos
        location /upload {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_header;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            if ($request_method = 'POST') {
                content_by_lua_block {
                    local upload = require "resty.upload"
                    local cjson = require "cjson"
                    
                    local chunk_size = 4096
                    local form = upload:new(chunk_size)
                    
                    local file
                    local filename
                    
                    while true do
                        local typ, res, err = form:read()
                        if not typ then
                            ngx.say("failed to read: ", err)
                            return
                        end
                        
                        if typ == "header" then
                            local header = res[1]
                            local value = res[2]
                            if header == "Content-Disposition" then
                                filename = string.match(value, 'filename="(.*)"')
                                if filename then
                                    file = io.open("/data/" .. filename, "w+")
                                end
                            end
                        elseif typ == "body" then
                            if file then
                                file:write(res)
                            end
                        elseif typ == "part_end" then
                            if file then
                                file:close()
                                file = nil
                            end
                        elseif typ == "eof" then
                            break
                        end
                    end
                    
                    if filename then
                        ngx.header.content_type = "application/json"
                        ngx.say(cjson.encode({
                            url = "/" .. filename
                        }))
                    else
                        ngx.status = 400
                        ngx.say("No file uploaded")
                    end
                }
            }
        }

        # Caché para archivos estáticos
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|mp4)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
        
        location / {
            try_files $uri $uri/ =404;
            autoindex off;
        }
    }
} 