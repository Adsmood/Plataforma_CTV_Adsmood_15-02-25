worker_processes auto;
error_log /usr/local/openresty/nginx/logs/error.log warn;
pid /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Configuración de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /usr/local/openresty/nginx/logs/access.log main buffer=16k;

    # Optimizaciones básicas
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    reset_timedout_connection on;
    client_body_timeout 10;
    send_timeout 2;

    # Configuración de buffers
    client_body_buffer_size 128k;
    client_max_body_size 100M;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Configuración de cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Compresión gzip
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        application/javascript
        application/json
        application/xml
        application/xml+rss
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Configuración de directorios temporales
    proxy_temp_path /usr/local/openresty/nginx/proxy_temp;
    client_body_temp_path /usr/local/openresty/nginx/client_body_temp;
    fastcgi_temp_path /usr/local/openresty/nginx/fastcgi_temp;
    uwsgi_temp_path /usr/local/openresty/nginx/uwsgi_temp;
    scgi_temp_path /usr/local/openresty/nginx/scgi_temp;

    # Configuración de CORS
    map $http_origin $cors_header {
        default "";
        "~^https?://.*\.onrender\.com$" "$http_origin";
        "~^https?://.*\.render\.com$" "$http_origin";
        "~^https?://.*\.adsmood\.com$" "$http_origin";
        "~^https?://.*\.doubleclick\.net$" "$http_origin";
    }

    server {
        listen 80;
        server_name _;
        root /data;

        # Headers de seguridad
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Cache para archivos estáticos
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|mp4|webm|ogg)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            # Configuración de buffer para streaming
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 1M;
            proxy_busy_buffers_size 2M;
            proxy_max_temp_file_size 0;

            # Soporte para range requests (streaming de video)
            add_header Accept-Ranges bytes;
            
            try_files $uri =404;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
                add_header 'Access-Control-Allow-Headers' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Endpoint para subida de archivos
        location /upload {
            limit_except POST OPTIONS {
                deny all;
            }

            client_max_body_size 100M;
            client_body_buffer_size 100M;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                
                content_by_lua_block {
                    local upload = require "resty.upload"
                    local cjson = require "cjson"
                    
                    local chunk_size = 4096
                    local form = upload:new(chunk_size)
                    
                    local file
                    local filename
                    
                    -- Función para sanitizar nombre de archivo
                    local function sanitize_filename(name)
                        if not name then return nil end
                        
                        -- Eliminar caracteres no seguros y path traversal
                        name = name:gsub("[^%w%.%-_]", "_")
                        name = name:gsub("%.%.", "_")
                        
                        -- Asegurar extensión válida
                        local ext = name:match("%.([^%.]+)$")
                        if not ext then return nil end
                        
                        local valid_extensions = {
                            jpg = true, jpeg = true, png = true, gif = true,
                            mp4 = true, webm = true, ogg = true
                        }
                        
                        if not valid_extensions[ext:lower()] then
                            return nil
                        end
                        
                        -- Generar nombre único
                        local timestamp = ngx.time()
                        local random = math.random(1000, 9999)
                        return string.format("%d_%d_%s", timestamp, random, name)
                    end
                    
                    -- Inicializar random seed
                    math.randomseed(ngx.time())
                    
                    -- Agregar logging
                    ngx.log(ngx.INFO, "Iniciando subida de archivo")
                    
                    while true do
                        local typ, res, err = form:read()
                        if not typ then
                            ngx.log(ngx.ERR, "Error leyendo form: ", err)
                            ngx.status = 400
                            ngx.say(cjson.encode({
                                error = "Error leyendo form: " .. (err or "unknown")
                            }))
                            return
                        end
                        
                        if typ == "header" then
                            local header = res[1]
                            local value = res[2]
                            ngx.log(ngx.INFO, "Header recibido: ", header, " = ", value)
                            
                            if header == "Content-Disposition" then
                                -- Buscar tanto name como filename
                                local name = string.match(value, 'name="([^"]+)"')
                                local original_filename = string.match(value, 'filename="([^"]+)"')
                                
                                ngx.log(ngx.INFO, "Field name: ", name, ", original filename: ", original_filename)
                                
                                if original_filename and name == "file" then
                                    filename = sanitize_filename(original_filename)
                                    if not filename then
                                        ngx.log(ngx.ERR, "Nombre de archivo inválido o extensión no permitida")
                                        ngx.status = 400
                                        ngx.say(cjson.encode({
                                            error = "Tipo de archivo no permitido"
                                        }))
                                        return
                                    end
                                    
                                    local filepath = "/data/" .. filename
                                    ngx.log(ngx.INFO, "Abriendo archivo: ", filepath)
                                    file = io.open(filepath, "w+")
                                    if not file then
                                        ngx.log(ngx.ERR, "Error abriendo archivo: ", filepath)
                                        ngx.status = 500
                                        ngx.say(cjson.encode({
                                            error = "Error creando archivo"
                                        }))
                                        return
                                    end
                                end
                            end
                        elseif typ == "body" then
                            if file then
                                file:write(res)
                            end
                        elseif typ == "part_end" then
                            if file then
                                file:close()
                                file = nil
                            end
                        elseif typ == "eof" then
                            break
                        end
                    end
                    
                    if filename then
                        ngx.log(ngx.INFO, "Subida exitosa: ", filename)
                        ngx.header.content_type = "application/json"
                        ngx.say(cjson.encode({
                            url = "/" .. filename,
                            success = true
                        }))
                    else
                        ngx.log(ngx.ERR, "No se recibió ningún archivo")
                        ngx.status = 400
                        ngx.say(cjson.encode({
                            error = "No se recibió ningún archivo"
                        }))
                    end
                }
            }
        }
        
        # Acceso público a archivos
        location / {
            # Denegar acceso a archivos ocultos
            location ~ /\. {
                deny all;
                return 404;
            }

            try_files $uri $uri/ =404;
            autoindex off;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            
            # Páginas de error personalizadas
            error_page 403 = @403;
            error_page 404 = @404;
        }

        # Manejadores de error
        location @403 {
            default_type application/json;
            return 403 '{"error": "Acceso prohibido", "message": "No se permite listar el directorio"}';
        }

        location @404 {
            default_type application/json;
            return 404 '{"error": "No encontrado", "message": "El archivo solicitado no existe"}';
        }
    }
} 